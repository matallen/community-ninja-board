/**
 * Giveback Ninja
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Level from '../model/Level';
import Scorecard from '../model/Scorecard';
import User from '../model/User';

/**
* Default service.
* @module api/DefaultApi
* @version 2.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/DefaultApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a new user in the system.
     * @param {module:model/User} user 
     * @param {module:api/DefaultApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    createUser(user, callback) {
      let postBody = user;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the levelGet operation.
     * @callback module:api/DefaultApi~levelGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Level>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain all available Levels
     * @param {module:api/DefaultApi~levelGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Level>}
     */
    levelGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Level];
      return this.apiClient.callApi(
        '/level', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scorecardGet operation.
     * @callback module:api/DefaultApi~scorecardGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Scorecard>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all user scorecards.
     * @param {module:api/DefaultApi~scorecardGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Scorecard>}
     */
    scorecardGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Scorecard];
      return this.apiClient.callApi(
        '/scorecard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scorecardUsernameGet operation.
     * @callback module:api/DefaultApi~scorecardUsernameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scorecard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get UserScorecard info for a specific user.
     * @param {String} username The unique name of a specific user.
     * @param {module:api/DefaultApi~scorecardUsernameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scorecard}
     */
    scorecardUsernameGet(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling scorecardUsernameGet");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Scorecard;
      return this.apiClient.callApi(
        '/scorecard/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scorecardUsernamePoolPost operation.
     * @callback module:api/DefaultApi~scorecardUsernamePoolPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scorecard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} username The unique name of the user.
     * @param {String} pool The pool to increment. The pool will be created if not already defined.
     * @param {Number} body 
     * @param {module:api/DefaultApi~scorecardUsernamePoolPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scorecard}
     */
    scorecardUsernamePoolPost(username, pool, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling scorecardUsernamePoolPost");
      }
      // verify the required parameter 'pool' is set
      if (pool === undefined || pool === null) {
        throw new Error("Missing the required parameter 'pool' when calling scorecardUsernamePoolPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling scorecardUsernamePoolPost");
      }

      let pathParams = {
        'username': username,
        'pool': pool
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = Scorecard;
      return this.apiClient.callApi(
        '/scorecard/{username}/{pool}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
