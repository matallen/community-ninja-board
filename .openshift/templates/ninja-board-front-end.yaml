apiVersion: v1
kind: Template
metadata:
  name: ninja-board-front-end
  annotations:
    iconClass: icon-jboss
    tags: nodejs
    description: Build the front-end Ninja Board App
labels:
  application: ${APPLICATION_NAME}
objects:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: nodejs
  spec:
    tags:
    - from:
        kind: DockerImage
        name: registry.access.redhat.com/ubi8/nodejs-12:latest
      name: '12'
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/component: ${APPLICATION_NAME}
      app.kubernetes.io/instance: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-build
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: nginx
  spec:
    tags:
    - from:
        kind: DockerImage
        name: registry.access.redhat.com/rhscl/nginx-112-rhel7:latest
      name: '1.12'
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/component: ${APPLICATION_NAME}
      app.kubernetes.io/instance: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/component: ${APPLICATION_NAME}
      app.kubernetes.io/instance: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-build
  spec:
    resources:
      limits:
        memory: 1Gi
        cpu: '1'
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}-build:latest
    source:
      contextDir: ${SOURCE_REPOSITORY_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nodejs:12
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange:
      type: ImageChange
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    source:
      type: Image
      images:
      - from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-build:latest
        paths:
        - sourcePath: /opt/app-root/src/build/.
          destinationDir: "."
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nginx:1.12
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
- apiVersion: v1  
  kind: ConfigMap
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: front-end-configmap
  data:
    config.js: window.USER_MANAGEMENT_API_URL="${API_URL}";
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/component: ${APPLICATION_NAME}
      app.kubernetes.io/instance: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APPLICATION_NAME}
    template:
      metadata:
        labels:
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - image: ${APPLICATION_NAME}:latest
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          volumeMounts:
          - mountPath: /opt/app-root/src/config
            name: front-end-configmap
            readOnly: true
        volumes:
        - configMap:
            defaultMode: 420
            name: front-end-configmap
          name: front-end-configmap
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: http
      port: 8080
    selector:
      deploymentconfig: ${APPLICATION_NAME}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: ${APPLICATION_NAME}
parameters:
- name: APPLICATION_NAME
  description: The name for the application.
  required: true
  value: ninja-board-front-end
- name: SOURCE_REPOSITORY_URL
  description: The source URL for the application
  displayName: Source URL
  value: https://github.com/redhat-cop/ninja-board
  required: true
- name: SOURCE_REPOSITORY_REF
  description: The branch name for the application
  displayName: Source Branch
  value: v2
  required: true
- name: SOURCE_REPOSITORY_DIR
  description: The location within the source repo of the application
  displayName: Source Directory
  value: react/ninja-react
  required: true
- name: API_URL
  description: The URL for the API endpoint
  required: true